#! /usr/bin/ruby

require 'tmpdir'
require 'open3'
require 'optparse'
require 'ostruct'
require 'timeout'
require 'net/http'
require 'json'
require 'uri'
require 'fileutils'

$running_log_lines = []

def colorize(text, color_code)
  "\e[#{color_code}m#{text}\e[0m"
end

def strip_whitespace(text)
  return text.gsub(/\s/,'')
end

def log(msg)
  $running_log_lines << msg
  puts msg
end

def log_grey(msg)
  $running_log_lines << msg
  puts colorize(msg, 90)
end

def log_red(msg)
  $running_log_lines << msg
  puts colorize(msg, 31)
end

def log_green(msg)
  $running_log_lines << msg
  puts colorize(msg, 32)
end

module Couch
  class Server
    def initialize(host, port, login, password)
      @host = host
      @port = port
      @login = login
      @password = password
    end

    def get(uri)
      req = Net::HTTP::Get.new(uri)
      request(req)
    end

    def request(req)
      begin
        http = Net::HTTP.new(@host, @port)
        req.basic_auth(@login, @password)
        res = http.request(req)

        unless res.kind_of?(Net::HTTPSuccess)
          handle_error(req, res)
        end
        return JSON.parse(res.body)
      rescue Exception => e
        log_exception(e, "Error connecting to couchDB")
      end
    end

    private
    def handle_error(req, res)
      log_red "#{res.code}:#{res.message}\nMETHOD:#{req.method}\nURI:#{req.path}\n#{res.body}"
    end
  end
end

class XCSCouch
  def initialize(password)
    @server = Couch::Server.new("127.0.0.1", "10355", "xcscouchadmin", password)
  end

  def bot_ids
    res = @server.get("/xcs/_design/bot/_view/all-bots")
    bot_ids = []
    if res
      res["rows"].each do |row|
          bot_ids.push(row["id"])
      end
    end
    bot_ids
  end

  def last_integration_for_bot(bot_id)
    url = "/xcs/_design/integration/_view/last-integration?descending=true&limit=2&include_docs=true&reduce=false"
    url = URI::escape(url)
    res = @server.get(url)
    
    integrations = []
    if res
      if res["rows"]
        integrations = res["rows"]
      end
    end
    integrations
  end

  def bots
    res = @server.get("/xcs/_design/bot/_view/all-bots?include_docs=true")
    bots = []
    if res && res["rows"].any?
      bots = res["rows"]
    end
    bots
  end

  def settings
    res = @server.get("/xcs/_design/settings/_view/all-settings?include_docs=true")
    settings = ""
    if res && res["rows"].any?
      settings = res["rows"].first['doc']
    end
    settings
  end

  def versions
    res = @server.get("/xcs/_design/version/_view/all-versions?include_docs=true")
    versions = ""
    if res && res["rows"].any?
      versions = res["rows"].first['doc']
    end
    versions
  end
end

# one day in seconds
ONE_DAY = 86400
# build user logs time limit in days
BUILD_USER_LOGS_TIME_LIMIT = 30

def copy_build_user_logs(path, source_root, destination_root)
  if !Dir.exists?(path)
    log_red("** Error No folder found at path #{path} **")
    return
  end
  if !Dir.exists?(destination_root)
    log_red("** Error No folder found at path #{destination_root} **")
    return
  end

  folder_at_path = Dir.entries("#{path}")
  
  folder_at_path.each do |entry|
    if !(entry == '.' || entry == '..' || entry == '.DS_Store')
      entry_path = "#{path}/#{entry}"
      type = File.directory?("#{entry_path}") ? "Folder" : "File"
      
      if type == "Folder"
        copy_build_user_logs(entry_path, source_root, destination_root)
      elsif type == "File"
        inspect_and_copy_file(entry_path, source_root, destination_root)
      end
    end
  end
rescue Exception => e
  log_exception(e)
end

def inspect_and_copy_file(path, source_root, destination_root)
  if ((Time.now - File.stat(path).mtime).to_i / ONE_DAY) <= BUILD_USER_LOGS_TIME_LIMIT
    destination = path.sub source_root, destination_root
    run "/usr/bin/ditto \"#{path}\" \"#{destination}\""
  end
rescue Exception => e
  log_exception(e)
end

def run(cmd)
  # The two nested timeout blocks are on purpose:
  # https://redmine.ruby-lang.org/issues/4681
  Timeout.timeout(120) do
    Timeout.timeout(120) do
      stdout, stderr, exit_status = Open3.capture3(ENV, cmd)
      unless exit_status.success?
        log_red("** Error running command (#{cmd}) **")
        log_red(stderr)
      end
      return [stdout, stderr, exit_status]
    end
  end
  
rescue Timeout::Error
  log_red "** Command timed out: #{cmd}"
  return ['', '', -1]
end

def log_exception(error, custom_message=nil)
  exception_file = "#{TEMP_DIR}/xcsdiagnose_fatal_errors.log"
  error_message = ""
  if custom_message
    error_message += "** #{custom_message} (#{error.inspect}) **\n"
  else
    error_message += "** Got an exception running xcsdiagnose (#{error.inspect}) **\n"
  end
  
  error_with_backtrace = "#{error_message} #{error.backtrace.join('\n')}\n"
  log_red(error_message)

  File.open(exception_file, "a") { |f|
      f.puts("#{error_with_backtrace}\n")
  }
end

def create_archive()
  log "=== Creating tar archive of results =="
  system "/usr/bin/tar zcvf #{FILENAME} -C #{TEMP_DIR} ." or raise "Could not create xcsdiagnose archive!"
  run "/bin/chmod 644 #{FILENAME}"
  run "/usr/bin/open -R #{FILENAME}"
  log "  | Done"
end

%w[ SIGHUP SIGINT SIGQUIT SIGTERM ].each { |sig| trap(sig) { Kernel.exit! } }

log "** Welcome to xcsdiagnose **"

if Process.euid != 0
  log_red("** xcsdiagnose must run as root, exiting **")
  Kernel.exit!
end

SERVICE_DATA_DIR = "/Library/Developer/XcodeServer"
CURRENT_DEVELOPER_DIR = "#{SERVICE_DATA_DIR}/CurrentXcodeSymlink/Contents/Developer"
OS_VERSION = `sw_vers -productVersion`.chomp.to_f
TEMP_DIR = Dir.mktmpdir
FILENAME = "/tmp/#{File.basename(TEMP_DIR)}.xcsdiagnose.tgz"

begin
  
  options = {
    assets_to_keep: 10,
    all_integrations: false
  }
  OptionParser.new do |opts|
    opts.banner = "Usage: xcsdiagnose [options]"

    opts.on("-n", "--number-of-integrations N", Integer, "Capture assets for N integrations back per bot (defaults to 10)") do |n|
      options[:assets_to_keep] = n
    end
    
    opts.on("-a", "--all-integrations", "Capture assets for all integrations on each bot") do |a|
      options[:all_integrations] = a
    end
  end.parse!
  
  log "== Preparing =="
  log "-- Created temporary directory #{TEMP_DIR}"
  logs_dir = "#{TEMP_DIR}/Logs"
  log "-- Creating logs directory #{logs_dir}"
  Dir.mkdir(logs_dir)
  integration_assets_dir = "#{TEMP_DIR}/IntegrationAssets"
  log "-- Creating integration assets directory #{integration_assets_dir}"
  Dir.mkdir(integration_assets_dir)
  keychains_dir = "#{TEMP_DIR}/Keychains"
  log "-- Creating keychains directory #{keychains_dir}"
  Dir.mkdir(keychains_dir)
  shared_secrets_dir = "#{TEMP_DIR}/SharedSecrets"
  log "-- Creating shared secrets directory #{shared_secrets_dir}"
  Dir.mkdir(shared_secrets_dir)
  portal_dir = "#{TEMP_DIR}/Portal"
  log "-- Creating portal directory #{portal_dir}"
  Dir.mkdir(portal_dir)
  diagnostics_dir = "#{TEMP_DIR}/Diagnostics"
  log "-- Creating diagnostics directory #{diagnostics_dir}"
  Dir.mkdir(diagnostics_dir)
  couch_documents_dir = "#{TEMP_DIR}/CouchDocuments"
  log "-- Creating integration documents directory #{couch_documents_dir}"
  Dir.mkdir(couch_documents_dir)
  log "  | Done"
  
  log "== Getting product versions =="
  version_string_output = run("/usr/bin/xcrun xcscontrol --version")
  version_output_path = "#{diagnostics_dir}/Version.txt"
  File.open(version_output_path, "w") { |f|
      f.write(version_string_output[0])
      f.write(version_string_output[1])
  }
  server_app_output = run("/usr/bin/xcrun xcscontrol --serverapp-check-compatibility")
  version_output_path = "#{diagnostics_dir}/ServerApp.txt"
  File.open(version_output_path, "w") { |f|
      f.write(server_app_output[0])
      f.write(server_app_output[1])
  }
  log "  | Done"
  
  log "== Preflighting service =="
  preflight_string = run("/usr/bin/xcrun xcscontrol --preflight")[0]
  preflight_output_path = "#{diagnostics_dir}/Preflight.output"
  File.open(preflight_output_path, "w") { |f|
      f.write(preflight_string)
  }
  log "  | Done"
  
  log "== Getting builder status =="
  builder_status_string = run("/usr/bin/xcrun xcscontrol --build-session-status")[0]
  builder_status_output_path = "#{diagnostics_dir}/BuildSessionStatus.txt"
  File.write(builder_status_output_path, builder_status_string)
  log "  | Done"
  
  log "== Getting 'serveradmin settings xcode' =="
  if File.exists?("/Applications/Server.app/Contents/ServerRoot/usr/sbin/serveradmin")
    serveradmin_tuple = run("/Applications/Server.app/Contents/ServerRoot/usr/sbin/serveradmin settings xcode")
    File.open("#{diagnostics_dir}/serveradmin_xcode_settings.output", "w") { |f|
      f.write(serveradmin_tuple[0])
    }
    log "  | Done"
  else
    log "  | Skipping, serveradmin not found"
  end
  
  log "== Gathering platform information =="
  platforms_string = run("/usr/bin/xcrun xcscontrol --list-platforms")[0]
  platforms_output_path = "#{diagnostics_dir}/ListPlatforms.output"
  File.open(platforms_output_path, "w") { |f|
      f.write(platforms_string)
  }
  log "  | Done"
  
  log "== Gathering device information =="
  puts run("/usr/bin/xcrun xcscontrol --list-devices")
  devices_string = run("/usr/bin/xcrun xcscontrol --list-devices")[0]
  devices_output_path = "#{diagnostics_dir}/ListDevices.output"
  File.open(devices_output_path, "w") { |f|
      f.write(devices_string)
  }
  log "  | Done"
  
  log "== Gathering simulator information =="
  devices_string = run("/usr/bin/xcrun xcscontrol --list-simulators")[0]
  devices_output_path = "#{diagnostics_dir}/ListSimulators.output"
  File.open(devices_output_path, "w") { |f|
      f.write(devices_string)
  }
  log "  | Done"

  log "== Gathering health information =="
  health_string = run("/usr/bin/xcrun xcscontrol --health")[0]
  health_output_path = "#{diagnostics_dir}/Health.output"
  File.open(health_output_path, "w") { |f|
      f.write(health_string)
  }
  log "  | Done"
  
  log "== Gathering code signature information =="
  signature_output_path = "#{diagnostics_dir}/CodeSignatures.output"
  code_signed_tools = [
    "#{CURRENT_DEVELOPER_DIR}/usr/bin/make",  # as a "control" sample
    "#{CURRENT_DEVELOPER_DIR}/usr/bin/xcsbridge",
    "#{CURRENT_DEVELOPER_DIR}/usr/bin/xcscontrol",
    "#{CURRENT_DEVELOPER_DIR}/usr/bin/xcssecurity",
    "#{CURRENT_DEVELOPER_DIR}/Applications/Xcode Server Builder.app/Contents/MacOS/Xcode Server Builder",
    "#{CURRENT_DEVELOPER_DIR}/Applications/Xcode Server Builder.app/Contents/XPCServices/XCSBuilderService.xpc/Contents/MacOS/XCSBuilderService",
    "#{CURRENT_DEVELOPER_DIR}/Applications/Xcode Server Builder.app/Contents/XPCServices/XCSDeviceService.xpc/Contents/MacOS/XCSDeviceService",
    "#{CURRENT_DEVELOPER_DIR}/Applications/Xcode Server Builder.app/Contents/XPCServices/XCSIntegrationService.xpc/Contents/MacOS/XCSIntegrationService"
  ]
  signature_output = []
  code_signed_tools.each do |toolPath|
    sig_info = run("/usr/sbin/spctl --assess -vv '#{toolPath}'")[0]
    signature_output.push(sig_info)
  end
  File.open(signature_output_path, "w") { |f|
    f.write(signature_output.join("----------\n"))
  }
  log "  | Done"
  
  log "== Gathering logs =="
  log "-- Gathering system logs"
  system_logs_to_gather = [
    "#{SERVICE_DATA_DIR}/Logs/*",
    "/Library/Logs/CrashReporter",
    "/Library/Logs/DiagnosticReports",
    "/var/log/system.log*",
    "/Library/Logs/ServerSetup.log",
    "/Library/Logs/servermgr_xcode.log",
    "/Library/Logs/Server.log",
    "/Library/Logs/xcscontrol.log"
  ]
  systemlogs_dir = "#{logs_dir}/System"
  run "/bin/mkdir -p #{systemlogs_dir}"
  system_logs_to_gather.each do |source_path|
    log "-- Copying #{source_path} to #{systemlogs_dir}"
    run "/bin/cp -R #{source_path} #{systemlogs_dir}"
  end
  
  if OS_VERSION >= 10.12
    log "-- Gathering system log database"
    run "/usr/bin/log collect --output #{systemlogs_dir} --size 512m"
  end
  
  user_name = File.read("#{SERVICE_DATA_DIR}/Configuration/BuildServiceUserName") rescue '_xcsbuildd'
  home_directory = `dscl . -read /Users/#{user_name} NFSHomeDirectory | awk '{print $2}'`.chomp rescue nil
  
  if home_directory
    log "-- Gathering build user logs"

    build_user_logs_to_gather = [
      "#{home_directory}/Library/Logs/DiagnosticReports",
      "#{home_directory}/Library/Logs/CrashReporter",
      "#{home_directory}/Library/Logs/CoreSimulator"
    ]
    build_user_logs = "#{logs_dir}/BuildUser"
    source_path_mask = "#{home_directory}/Library/Logs"
    run "/bin/mkdir -p #{build_user_logs}"

    build_user_logs_to_gather.each do |source_path|
      log "-- Copying #{source_path} to #{build_user_logs}"
      copy_build_user_logs(source_path, source_path_mask, build_user_logs)
    end
    log "  | Done"
  end
  
  log "== Gathering non-personal keychains =="
  keychains_we_care_about = {
    'Portal.keychain' => 'PortalKeychainSharedSecret'
  }
  keychains_we_care_about.each do |keychain_name, keychain_shared_secret|
    keychain_path = "#{SERVICE_DATA_DIR}/Keychains/#{keychain_name}"
    keychain_shared_secret_path = "#{SERVICE_DATA_DIR}/SharedSecrets/#{keychain_shared_secret}"
    if File.exists?(keychain_path)
      log "-- Copying #{keychain_name} to #{keychains_dir}"
      run "/bin/cp #{keychain_path} #{keychains_dir}"
    end
    if File.exists?(keychain_shared_secret_path)
      log "-- Copying #{keychain_shared_secret} to #{keychains_dir}"
      run "/bin/cp #{keychain_shared_secret_path} #{keychains_dir}"
    end
  end
  log "  | Done"
    
  log "== Gathering diagnostics =="
  processes_we_care_about = {
    'node' => '_xcsd',
    'beam.smp' => '_xcscouch',
    'XCSBuilderService' => user_name,
    'XCSDeviceService' => user_name,
    'XCSIntegrationService' => user_name,
    'xcscontrol' => 'root',
    'xcodebuild' => user_name,
    'XCBBuildService' => user_name,
    'XCBBuildServiceDebug' => user_name,
    'ibtool' => user_name,
    'xctest' => user_name,
    'com.apple.dt.Xcode.sourcecontrol.Git' => user_name,
    'com.apple.dt.Xcode.sourcecontrol.Subversion' => user_name,
    'com.apple.dt.Xcode.sourcecontrol.WorkingCopyScanner' => user_name,
    'com.apple.dt.Xcode.sourcecontrol.SSHKeyGenerator' => user_name
  }
  log "-- Getting memory usage for processes"
  processes_we_care_about.each_key do |process_name|
    begin
      `/usr/bin/pgrep #{process_name}$`.split("\n").each do |pid|
        memory_kb = `/bin/ps -o rss= -p #{pid}`.to_f
        memory_mb = (memory_kb / 1024).round(2)
        log("---- #{process_name}-#{pid} is using #{memory_kb}KB / #{memory_mb}MB")
        end
    rescue Exception => e
    end
  end
  log "  | Done"
  log "-- Sampling processes"
  processes_we_care_about.each do |process_name, process_user|
    `/usr/bin/pgrep -u #{process_user} #{process_name}$`.split("\n").each do |pid|
      log "---- Sampling #{process_name}-#{pid} for #{process_user}"
      sample_output = run("/usr/bin/sample #{pid}")[0]
      sample_output_path = "#{diagnostics_dir}/#{process_name}-#{pid}.sample"
      File.open(sample_output_path, "w") { |f|
        f.write(sample_output)
      }
      log "    | Done sampling #{process_name} to #{sample_output_path}"
    end
  end
  log "  | Done"
  log "-- Running lsof to diagnose file descriptors"
  lsof_output = run("/usr/sbin/lsof")[0]
  File.open("#{diagnostics_dir}/lsof.output", "w") { |f|
    f.write(lsof_output)
  }
  processes_we_care_about.each_key do |process_name|
    IO.popen("/usr/bin/grep #{process_name} | /usr/bin/wc -l", mode='r+') do |io|
      io.write lsof_output
      io.close_write
      file_descriptors_per_process = io.read.gsub(/\s/,'')
      log "---- #{process_name} name has #{file_descriptors_per_process} file descriptors open"
    end
  end
  log "  | Done"
  
  log "== Gathering directory permissions =="
  log "-- Gathering permissions on /Library/Developer/XcodeServer"
  xcode_server_path = "/Library/Developer/XcodeServer"
  xcode_server_perms_file_path = "/tmp/XcodeServer_perms.txt"
  run "/bin/ls -al #{xcode_server_path} > #{xcode_server_perms_file_path}"
  log "-- Copying #{xcode_server_perms_file_path} to #{diagnostics_dir}"
  run "/bin/cp -R #{xcode_server_perms_file_path} #{diagnostics_dir}"
  log "  | Done"

  log "== Gathering Database directory permissions =="
  log "-- Gathering permissions on /Library/Developer/XcodeServer/Database"
  database_dir_path = "/Library/Developer/XcodeServer/Database"
  database_dir_perms_file_path = "/tmp/Database_perms.txt"
  run "/bin/ls -al #{database_dir_path} > #{database_dir_perms_file_path}"
  log "-- Copying #{database_dir_perms_file_path} to #{diagnostics_dir}"
  run "/bin/cp -R #{database_dir_perms_file_path} #{diagnostics_dir}"
  log "  | Done"

  log "== Getting disk usage"
  log "---- Calculating disk usage for all volumes"
  disk_usage = run("/bin/df -h")[0]
  log "---- Disk usage for /: \n#{disk_usage}"
  log "---- Calculating disk usage for #{SERVICE_DATA_DIR}"
  library_server_disk_usage = run("/usr/bin/du -sh #{SERVICE_DATA_DIR}")[0]
  log "---- Disk usage for #{SERVICE_DATA_DIR}: #{strip_whitespace(library_server_disk_usage.gsub(SERVICE_DATA_DIR, ''))}"
  log "---- Generating disk usage breakdown for #{SERVICE_DATA_DIR}"
  library_server_disk_usage_breakdown = run("/usr/bin/du -ah #{SERVICE_DATA_DIR}")[0]
  File.open("#{diagnostics_dir}/ServiceDataDirectoryDiskUsage.output", "w") { |f|
    f.write(library_server_disk_usage_breakdown)
  }
  log "  | Done"
  
  log "== Gathering portal information"
  if File.exists?("#{SERVICE_DATA_DIR}/Portal.plist")
	  log "-- Copying Portal.plist from #{SERVICE_DATA_DIR}/Portal.plist to #{portal_dir}"
	  run("/bin/cp #{SERVICE_DATA_DIR}/Portal.plist #{portal_dir}/Portal.plist")
  end
  provisioning_profiles_path = "#{SERVICE_DATA_DIR}/ProvisioningProfiles"
  log "-- Copying provisioning profiles from #{provisioning_profiles_path} to #{portal_dir}"
  run("/bin/mkdir -p #{portal_dir}/ProvisioningProfiles")
  run("/bin/cp -R #{provisioning_profiles_path}/* #{portal_dir}/ProvisioningProfiles/")
  log "-- Dumping certificates matching \"developer\" from keychain"
  find_certificate_developer_output = run("/usr/bin/security find-certificate -a -c \"developer\"")[0]
  File.open("#{portal_dir}/FindCertificateDeveloper.output", "w") { |f|
    f.write(find_certificate_developer_output)
  }
  log "-- Dumping certificates matching \"xcode\" from system keychain"
  find_certificate_xcode_output = run("/usr/bin/security find-certificate -a -c \"xcode\"")[0]
  File.open("#{portal_dir}/FindCertificateXcodeSystemKeychain.output", "w") { |f|
    f.write(find_certificate_xcode_output)
  }
  log "-- Dumping identities (certificates and matching private keys) matching \"developer\" from system keychain"
  find_identity_developer_output = run("/usr/bin/security find-identity| grep -i \"developer\"")[0]
  File.open("#{portal_dir}/FindIdentityDeveloperSystemKeychain.output", "w") { |f|
    f.write(find_identity_developer_output)
  }
  log "-- Dumping identities (certificates and matching private keys) matching \"xcode\" from system keychain"
  find_identity_xcode_output = run("/usr/bin/security find-identity | grep -i \"xcode\"")[0]
  File.open("#{portal_dir}/FindIdentityXcodeSystemKeychain.output", "w") { |f|
    f.write(find_identity_xcode_output)
  }
  log "  | Done"
  
  log "== Copying integration assets =="
  if File.exists?("#{SERVICE_DATA_DIR}/IntegrationAssets")
    log "-- Copying log files from integration assets directory"
    

    Dir.chdir("#{SERVICE_DATA_DIR}/IntegrationAssets") {
      if options[:all_integrations]
        `find -E . -regex '.*(log|sample|crash)' | rsync --files-from=- ./ #{integration_assets_dir}`
      else
        Dir.foreach("#{SERVICE_DATA_DIR}/IntegrationAssets") do |bot_folder|
          fullDir = "#{SERVICE_DATA_DIR}/IntegrationAssets/#{bot_folder}"
          if !(bot_folder == "." || bot_folder == "..") and Dir.exist?(fullDir)
            integrations = Dir.entries(fullDir).sort! { |a,b| a.to_i <=> b.to_i }
            integrations.delete(".")
            integrations.delete("..")
            
            i = 0
            while i < options[:assets_to_keep] && integrations.count > 0 do
              integration_folder = integrations.pop
              `find -E "./#{bot_folder}/#{integration_folder}" -regex '.*(log|sample|crash)' | rsync --files-from=- ./ #{integration_assets_dir}`
              i=i+1
            end
          end
        end
      end
    }
  else
    log "-- Skipping copying log files from integration assets directory because the assets directory does not exist"
  end
  log "  | Done"
  
  log "== Copying couchDB documents =="
  if File.exists?("#{SERVICE_DATA_DIR}/SharedSecrets/XCSDCouchDBSecret")
    xcscouch_password = ""
    File.open("#{SERVICE_DATA_DIR}/SharedSecrets/XCSDCouchDBSecret", "r") do |f|
      f.each_line do |line|
        xcscouch_password = line
      end
    end
    couch_server = XCSCouch.new(xcscouch_password)

    log "-- Copying bots"
    bots = couch_server.bots
    bots.each do |bot|
      bot_name = bot['doc']['name']
      bot_name.gsub!(/[^0-9A-Z]/i, '_')
      Dir.chdir("#{couch_documents_dir}") {
        FileUtils.mkdir_p("#{couch_documents_dir}/#{bot_name}")
        Dir.chdir("#{couch_documents_dir}/#{bot_name}") {
          File.open("#{couch_documents_dir}/#{bot_name}/bot.json", "w") { |f|
            f.write(bot['doc'].to_json)
          }
        }
      }
    end 
    log "  | Done"
    
    log "-- Copying last two integrations for each bot"
    bot_ids = couch_server.bot_ids
    bot_ids.each do |bot_id|
      integrations = couch_server.last_integration_for_bot(bot_id)

      integrations.each do |integration|
        integration_name = integration['doc']['bot']['name']
        integration_name.gsub!(/[^0-9A-Z]/i, '_')
        integration_number = integration['doc']['number']

        Dir.chdir("#{couch_documents_dir}") {
          FileUtils.mkdir_p("#{couch_documents_dir}/#{integration_name}")
          Dir.chdir("#{couch_documents_dir}/#{integration_name}") {
            File.open("#{couch_documents_dir}/#{integration_name}/#{integration_number}.json", "w") { |f|
              f.write(integration['doc'].to_json)
            }
          }
        }
      end
    end

    log "-- Copying couch settings"
    settings = couch_server.settings
    if settings
      File.open("#{couch_documents_dir}/settings.json", "w") { |f|
        f.write(settings.to_json)
      }
    end

    log "-- Copying couch versions"
    versions = couch_server.versions
    if versions
      File.open("#{couch_documents_dir}/versions.json", "w") { |f|
        f.write(versions.to_json)
      }
    end
  end
  log "  | Done"
  
  log "== Writing xcsdiagnose log to disk =="
  xcsdiagnose_output_path = "#{TEMP_DIR}/xcsdiagnose.output"
  File.open("#{xcsdiagnose_output_path}", "w") { |f|
    f.write($running_log_lines.join("\n"))
  }
  log "  | Done"
  
  create_archive
  
rescue Exception => e
  log_exception(e)
  create_archive
  Kernel.exit!
end

log_green("** xcsdiagnose complete, please attach the tar file at #{FILENAME} to a bug report **")
